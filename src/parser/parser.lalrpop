// Mostly taken from Nikomatsakis LALRPOP tutorial
use super::ast::{
    Expr, Opcode, Func, Assignment, Sign, Instruction,
    Condition, IfBlock, CompOp, LogicOp};
use super::lexer::Token;

grammar;

Tier<Op,NextTier>: Box<Expr> = {
    Tier<Op,NextTier> Op NextTier => Box::new(Expr::Op(<>)),
    NextTier
};

pub Expr = Tier<ExprOp, Factor>;
Factor = Tier<FactorOp, SignedFactor>;

ExprOp: Opcode = {
    "+" => Opcode::Plus,
    "-" => Opcode::Minus,
};

FactorOp: Opcode = {
    "*" => Opcode::Multiply,
    "/" => Opcode::Divide,
};

PowerOp: Opcode = {
    "^" => Opcode::Pow,
};

SignedFactor: Box<Expr> = {
    Sign SignedFactor => Box::new(Expr::Signed(<>)),
    Power,
};

Sign: Sign = {
    "-" => Sign::Minus,
    "+" => Sign::Plus,
};

// This must be done separately, because 2 ^ 3 ^ 4 must be parsed (2 ^ (3 ^ 4))
Power: Box<Expr> = {
    Term PowerOp Power => Box::new(Expr::Op(<>)),
    Term,
};

Term: Box<Expr> = {
    Float => Box::new(Expr::Number(<>)),
    <n:Function> "(" <a:Exprs> ")"  => Box::new(Expr::Function(n,a)),
    <g:"$"?> <n:Ident> => Box::new(Expr::Variable{local:g.is_none(),name:n}),
    "(" <Expr> ")"
};

Function: Func = {
    "rand" => Func::Rand,
    "min" => Func::Min,
    "max" => Func::Max,
    "sin" => Func::Sin,
    "cos" => Func::Cos,
};

Exprs = Comma<Expr>;

Comma<T>: Vec<T> = {
    <v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};

Assign: Instruction = <g:"$"?> <n:Ident> "=" <e:Expr> ";" =>
    Instruction::new_assignment(g.is_none(), n, e);

If: Instruction = "if" <Condition> <InstructionBlock> <("else" <InstructionBlock>)?> => {
    Instruction::new_if(<>)
};

Condition: Box<Condition> = {
    <l:Condition> "||" <r:ConditionAnd> => {
        Box::new(Condition::Logic(l,LogicOp::Or,r))
    },
    ConditionAnd
};

ConditionAnd: Box<Condition> = {
    <l:ConditionAnd> "&&" <r:ConditionTerm> => {
        Box::new(Condition::Logic(l,LogicOp::And,r))
    },
    ConditionTerm
};

ConditionTerm: Box<Condition> = {
    Expr CompOp Expr => Box::new(Condition::Comparison(<>)),
    // TODO: Remove mandatory parenthesis after introducing precedence between operators
    "exists" "(" "$"<Ident> ")" => Box::new(Condition::Exists(<>)),
    "(" <Condition> ")"
};

CompOp: CompOp = {
    "<"  => CompOp::InferiorStrict,
    "<=" => CompOp::InferiorEqual,
    ">"  => CompOp::SuperiorStrict,
    ">=" => CompOp::SuperiorEqual,
    "==" => CompOp::Equal,
    "!=" => CompOp::Different,
};

// TODO: Introduce precedence between operators
LogicOp: LogicOp = {
    "&&" => LogicOp::And,
    "||" => LogicOp::Or,
    //"^"  => LogicOp::Xor, // Conflicts with exponentiation, to be discussed later
};

Instruction: Instruction = {
    Assign,
    If,
};

InstructionBlock: Vec<Instruction> = "{" <Instruction*> "}";

pub Rule = Instruction*;

extern {
    type Location = ();
    type Error = String;

    enum Token {
        Ident => Token::Ident(<String>),
        QuotedString => Token::QuotedString(<String>),
        Float => Token::Float(<f64>),

        "{" => Token::LeftBracket,
        "}" => Token::RightBracket,
        "," => Token::Comma,
        ":" => Token::Colon,
        ";" => Token::SemiColon,
        "(" => Token::LeftParenthesis,
        ")" => Token::RightParenthesis,
        "[" => Token::LeftArray,
        "]" => Token::RightArray,
        "+" => Token::Plus,
        "-" => Token::Minus,
        "*" => Token::Multiply,
        "/" => Token::Divide,
        "^" => Token::Power,
        "=" => Token::Equal,
        "$" => Token::Dollar,
        "rand" => Token::Rand,
        "min" => Token::Min,
        "max" => Token::Max,
        "sin" => Token::Sin,
        "cos" => Token::Cos,
        "if" => Token::If,
        "else" => Token::Else,
        "exists" => Token::Exists,
        "==" => Token::DoubleEqual,
        "!=" => Token::Different,
        ">" => Token::SuperiorStrict,
        ">=" => Token::SuperiorEqual,
        "<" => Token::InferiorStrict,
        "<=" => Token::InferiorEqual,
        "&&" => Token::LogicalAnd,
        "||" => Token::LogicalOr,
    }
}

// vim: ft=rust
