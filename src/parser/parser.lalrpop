// Mostly taken from Nikomatsakis LALRPOP tutorial
use super::ast::{Expr, Opcode, Func, Assignment};
use super::lexer::Token;

grammar;

Tier<Op,NextTier>: Box<Expr> = {
    Tier<Op,NextTier> Op NextTier => Box::new(Expr::Op(<>)),
    NextTier
};

Expr = Tier<ExprOp, Factor>;
Factor = Tier<FactorOp, Power>;
Power = Tier<PowerOp, Term>;

ExprOp: Opcode = {
    "+" => Opcode::Plus,
    "-" => Opcode::Minus,
};

FactorOp: Opcode = {
    "*" => Opcode::Multiply,
    "/" => Opcode::Divide,
};

PowerOp: Opcode = {
    "^" => Opcode::Pow,
};

Term: Box<Expr> = {
    Float => Box::new(Expr::Number(<>)),
    <n:Function> "(" <a:Exprs> ")"  => Box::new(Expr::Function(n,a)),
    <g:"$"?> <n:Ident> => Box::new(Expr::Variable{local:g.is_none(),name:n}),
    "(" <Expr> ")"
};

Function: Func = {
    "rand" => Func::Rand,
    "min" => Func::Min,
    "max" => Func::Max,
    "sin" => Func::Sin,
    "cos" => Func::Cos,
};

Exprs = Comma<Expr>;

Comma<T>: Vec<T> = {
    <v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};

Assign: Assignment = <g:"$"?> <n:Ident> "=" <e:Expr> ";" =>
    Assignment::new(g.is_none(), n, e);

pub Rule = Assign*;

extern {
    type Location = ();
    type Error = String;

    enum Token {
        Ident => Token::Ident(<String>),
        QuotedString => Token::QuotedString(<String>),
        Float => Token::Float(<f64>),

        "{" => Token::LeftBracket,
        "}" => Token::RightBracket,
        "," => Token::Comma,
        ":" => Token::Colon,
        ";" => Token::SemiColon,
        "(" => Token::LeftParenthesis,
        ")" => Token::RightParenthesis,
        "[" => Token::LeftArray,
        "]" => Token::RightArray,
        "+" => Token::Plus,
        "-" => Token::Minus,
        "*" => Token::Multiply,
        "/" => Token::Divide,
        "^" => Token::Power,
        "=" => Token::Equal,
        "$" => Token::Dollar,
        "rand" => Token::Rand,
        "min" => Token::Min,
        "max" => Token::Max,
        "sin" => Token::Sin,
        "cos" => Token::Cos,
    }
}

// vim: ft=rust
